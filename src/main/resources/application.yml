server:
  port: ${PORT:${SERVER_PORT:0}}

spring:
  application:
    name: CatalogService
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  datasource:
    url: ${CATALOG_DB_URI}
    username: ${CATALOG_DB_USER}
    password: ${CATALOG_DB_PASSWORD}
    driver-class-name: ${CATALOG_DB_DRIVER}
  jpa:
    hibernate:
      ddl-auto: ${DB_DDL_AUTO}
    show-sql: true
    properties:
      hibernate:
        dialect: ${CATALOG_DB_DIALECT}
  cloud:
    vault:
      uri: ${VAULT_SERVER_HOST}
      token: ${VAULT_TOKEN}
      authentication: token
      scheme: http
      kv:
        enabled: true
        backend: secrets
        default-context: catalog
        profile-separator: "/"
    aws:
      credentials:
        accessKey: ${CATALOG_AWS_S3_ACCESS}
        secretKey: ${CATALOG_AWS_S3_SECRET}
      region:
        static: ${CATALOG_AWS_S3_REGION}
      stack:
        auto: false
      bucket:
        name: ${CATALOG_AWS_S3_BUCKET}
  config:
    import: vault://

  kafka:
    bootstrap-servers: 
      - ${KAFKA_SERVER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  zipkin:
    base-url: http://localhost:9411
springdoc:
  swagger-ui:
    path: ${SWAGGER_PATH}
  api-docs:
    path: /api-docs
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    metrics:
      enabled: true
    env:
      show-values: always
    prometheus:
      enabled: true
kafka:
  bootstrap-servers: ${KAFKA_SERVER}

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8080/eureka